{"remainingRequest":"/Users/meerananda/Downloads/vue-material-kit-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/meerananda/Downloads/vue-material-kit-master/src/views/Index.vue?vue&type=template&id=23543608&","dependencies":[{"path":"/Users/meerananda/Downloads/vue-material-kit-master/src/views/Index.vue","mtime":1587698295507},{"path":"/Users/meerananda/Downloads/vue-material-kit-master/node_modules/cache-loader/dist/cjs.js","mtime":1587504484515},{"path":"/Users/meerananda/Downloads/vue-material-kit-master/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1587504502020},{"path":"/Users/meerananda/Downloads/vue-material-kit-master/node_modules/cache-loader/dist/cjs.js","mtime":1587504484515},{"path":"/Users/meerananda/Downloads/vue-material-kit-master/node_modules/vue-loader/lib/index.js","mtime":1587504502020}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}